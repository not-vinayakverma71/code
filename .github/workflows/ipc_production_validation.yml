name: IPC Production Validation

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'lapce-ai/src/ipc/**'
      - 'lapce-ai/tests/direct_shm_ipc_test.rs'
      - 'lapce-ai/tests/comprehensive_multiprocess_ipc.rs'
      - 'lapce-ai/tests/stress_test_comprehensive.rs'
      - '.github/workflows/ipc_production_validation.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'lapce-ai/src/ipc/**'
      - 'lapce-ai/tests/direct_shm_ipc_test.rs'
      - 'lapce-ai/tests/comprehensive_multiprocess_ipc.rs'
      - 'lapce-ai/tests/stress_test_comprehensive.rs'
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -A warnings

jobs:
  test-direct-shm:
    name: Direct SHM Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install protobuf compiler (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler libprotobuf-dev

      - name: Install protobuf compiler (macOS)
        if: runner.os == 'macOS'
        run: brew install protobuf

      - name: Install protobuf compiler (Windows)
        if: runner.os == 'Windows'
        run: choco install protoc -y

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: lapce-ai/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-

      - name: Run Direct SHM IPC Test
        working-directory: lapce-ai
        run: cargo test --test direct_shm_ipc_test -- --nocapture --test-threads=1
        timeout-minutes: 60

      - name: Upload test results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: direct-shm-test-failure-${{ matrix.os }}
          path: |
            lapce-ai/target/debug/deps/*.log
            /tmp/direct_shm_test*

  test-comprehensive-multiprocess:
    name: Comprehensive Multi-Process Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install protobuf compiler (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler libprotobuf-dev

      - name: Install protobuf compiler (macOS)
        if: runner.os == 'macOS'
        run: brew install protobuf

      - name: Install protobuf compiler (Windows)
        if: runner.os == 'Windows'
        run: choco install protoc -y

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: lapce-ai/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-

      - name: Build IPC test server binary
        working-directory: lapce-ai
        run: cargo build --bin ipc_test_server

      - name: Run Comprehensive Multi-Process IPC Test
        working-directory: lapce-ai
        run: cargo test --test comprehensive_multiprocess_ipc -- --nocapture --test-threads=1
        timeout-minutes: 60

      - name: Upload test results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-test-failure-${{ matrix.os }}
          path: |
            lapce-ai/target/debug/deps/*.log
            /tmp/test_comprehensive_multiprocess_ipc*

  test-stress-comprehensive:
    name: Stress Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install protobuf compiler (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler libprotobuf-dev

      - name: Install protobuf compiler (macOS)
        if: runner.os == 'macOS'
        run: brew install protobuf

      - name: Install protobuf compiler (Windows)
        if: runner.os == 'Windows'
        run: choco install protoc -y

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: lapce-ai/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-

      - name: Run Comprehensive Stress Test
        working-directory: lapce-ai
        run: cargo test --test stress_test_comprehensive -- --nocapture --test-threads=1
        timeout-minutes: 60

      - name: Upload test results on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: stress-test-failure-${{ matrix.os }}
          path: |
            lapce-ai/target/debug/deps/*.log
            /tmp/stress_test*

  summary:
    name: Test Summary
    needs: [test-direct-shm, test-comprehensive-multiprocess, test-stress-comprehensive]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "## IPC Production Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- Direct SHM Test: ${{ needs.test-direct-shm.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Comprehensive Multi-Process Test: ${{ needs.test-comprehensive-multiprocess.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Stress Test: ${{ needs.test-stress-comprehensive.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test-direct-shm.result }}" == "success" ] && \
             [ "${{ needs.test-comprehensive-multiprocess.result }}" == "success" ] && \
             [ "${{ needs.test-stress-comprehensive.result }}" == "success" ]; then
            echo "✅ **All tests passed on all platforms!**" >> $GITHUB_STEP_SUMMARY
            echo "System is **PRODUCTION READY** 🚀" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some tests failed. Review logs above.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
