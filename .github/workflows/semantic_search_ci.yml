name: Semantic Search CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'lapce-ai/semantic_search/**'
      - 'lapce-ai/CST-tree-sitter/**'
      - '.github/workflows/semantic_search_ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'lapce-ai/semantic_search/**'
      - 'lapce-ai/CST-tree-sitter/**'
      - '.github/workflows/semantic_search_ci.yml'

jobs:
  test-default-features:
    name: Test (Default Features)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache target
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-target-default-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check formatting
        run: cargo fmt --check --manifest-path lapce-ai/semantic_search/Cargo.toml
      
      - name: Clippy (deny warnings)
        run: cargo clippy --manifest-path lapce-ai/semantic_search/Cargo.toml --all-targets -- -D warnings
      
      - name: Build (default features)
        run: cargo build --manifest-path lapce-ai/semantic_search/Cargo.toml --lib
      
      - name: Test (default features)
        run: cargo test --manifest-path lapce-ai/semantic_search/Cargo.toml --lib

  test-cst-feature:
    name: Test (CST Feature)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Cache target
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-target-cst-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Clippy with cst_ts (deny warnings)
        run: cargo clippy --manifest-path lapce-ai/semantic_search/Cargo.toml --all-targets --no-default-features --features cst_ts -- -D warnings
      
      - name: Build with cst_ts
        run: cargo build --manifest-path lapce-ai/semantic_search/Cargo.toml --lib --no-default-features --features cst_ts
      
      - name: Test with cst_ts
        run: cargo test --manifest-path lapce-ai/semantic_search/Cargo.toml --lib --no-default-features --features cst_ts
      
      - name: Test CST canonical mapping
        run: cargo test --manifest-path lapce-ai/semantic_search/Cargo.toml --lib --no-default-features --features cst_ts processors::cst_to_ast_pipeline::cst_to_ast_tests -- --nocapture

  check-both:
    name: Check Both Feature Sets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Check default features
        run: cargo check --manifest-path lapce-ai/semantic_search/Cargo.toml --lib
      
      - name: Check cst_ts feature
        run: cargo check --manifest-path lapce-ai/semantic_search/Cargo.toml --lib --no-default-features --features cst_ts
      
      - name: Check all features
        run: cargo check --manifest-path lapce-ai/semantic_search/Cargo.toml --lib --all-features
