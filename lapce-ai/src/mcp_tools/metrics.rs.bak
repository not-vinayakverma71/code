// Metrics module
// This module provides metrics collection for MCP tools
use std::sync::Arc;
use std::time::{Duration, Instant};
use dashmap::DashMap;
use tokio::sync::RwLock;
use serde::{Serialize, Deserialize};

pub struct MetricsCollector {
    tool_execution_times: DashMap<String, Vec<Duration>>,
    start_time: Instant,
}

impl MetricsCollector {
    pub fn new() -> Self {
        Self {
            tool_execution_times: DashMap::new(),
            start_time: Instant::now(),
        }
    }
    
    pub fn record_execution(&self, tool_name: &str, duration: Duration) {
        self.tool_execution_times.entry(tool_name.to_string())
            .or_insert_with(Vec::new)
            .push(duration);
    }
    
    pub fn get_global_metrics(&self) -> Option<GlobalMetrics> {
        Some(GlobalMetrics {
            uptime: self.start_time.elapsed(),
            total_executions: self.tool_execution_times.iter()
                .map(|e| e.value().len() as u64)
                .sum(),
        })
    }
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GlobalMetrics {
    #[serde(skip)]
    pub uptime: Duration,
    pub total_executions: u64,
}

impl GlobalMetrics {
    pub fn new() -> Self {
        Self {
            uptime: Duration::from_secs(0),
            total_executions: 0,
        }
    }
}

impl Default for ToolMetrics {
    fn default() -> Self {
        Self {
            execution_count: 0,
            success_count: 0,
            failure_count: 0,
            total_execution_time_ms: 0,
            average_execution_time_ms: 0.0,
            last_execution: None,
        }
    }
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ToolMetrics {
    pub execution_count: u64,
    pub success_count: u64,
    pub failure_count: u64,
    pub total_execution_time_ms: u64,
    pub average_execution_time_ms: f64,
    #[serde(skip)]
    pub last_execution: Option<Instant>,
}

impl Default for ToolMetrics {
    fn default() -> Self {
        Self {
            execution_count: 0,
            success_count: 0,
            failure_count: 0,
            total_execution_time_ms: 0,
            average_execution_time_ms: 0.0,
            last_execution: None,
        }
    }
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GlobalMetrics {
    pub total_requests: u64,
    pub total_successes: u64,
    pub total_failures: u64,
    pub average_dispatch_time_ms: f64,
    pub success_rate: f64,
    #[serde(skip, default = "Instant::now")]
    pub started_at: Instant,
}

impl GlobalMetrics {
    pub fn new() -> Self {
        Self {
            total_requests: 0,
            total_successes: 0,
            total_failures: 0,
            average_dispatch_time_ms: 0.0,
            success_rate: 0.0,
            started_at: Instant::now(),
        }
    }
}

// ... rest of the code remains the same ...
    pub fn get_tool_metrics(&self, tool_name: &str) -> Option<ToolMetrics> {
        self.tool_metrics.get(tool_name).map(|m| m.clone())
    }
    
    pub fn get_global_metrics(&self) -> Option<GlobalMetrics> {
        let global = self.global_metrics.blocking_read();
        Some(global.clone())
    }
}
