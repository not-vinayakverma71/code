// Retry handler for MCP tools
use std::time::Duration;
use anyhow::Result;

pub struct RetryHandler {
    max_retries: u32,
    base_delay: Duration,
}

impl RetryHandler {
    pub fn new() -> Self {
        Self {
            max_retries: 3,
            base_delay: Duration::from_millis(100),
        }
    }
        Fut: Future<Output = Result<T>>,
    {
        let mut attempt = 0;
        let mut delay_ms = self.policy.initial_delay_ms;
        
        loop {
            attempt += 1;
            
            match f().await {
                Ok(result) => return Ok(result),
                Err(e) if attempt >= self.policy.max_attempts => {
                    return Err(e);
                }
                Err(_) => {
                    sleep(Duration::from_millis(delay_ms)).await;
                    delay_ms = (delay_ms as f64 * self.policy.exponential_base) as u64;
                    delay_ms = delay_ms.min(self.policy.max_delay_ms);
                }
            }
        }
    }
}
