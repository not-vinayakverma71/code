name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * 0' # Weekly on Sunday

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  # Format and lint checks
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - uses: Swatinem/rust-cache@v2
        
      - name: Check formatting
        run: cargo fmt -- --check
        
      - name: Clippy (deny warnings)
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Test matrix across platforms
  test:
    name: Test - ${{ matrix.os }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        exclude:
          # Skip beta on Windows to save CI time
          - os: windows-latest
            rust: beta
            
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          
      - uses: Swatinem/rust-cache@v2
        
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
          
      - name: Build
        run: cargo build --all-features --verbose
        
      - name: Run unit tests
        run: cargo test --lib --verbose
        
      - name: Run smoke tests (core languages)
        run: cargo test --test lang_smoke --features core-langs
        
      - name: Run integration tests
        run: cargo test --tests --verbose
        
      - name: Run doc tests
        run: cargo test --doc --verbose
        
      - name: Run cross-platform determinism tests
        run: cargo test --test cross_platform_determinism --verbose
      
      - name: Run crash recovery tests
        run: cargo test --test crash_recovery --verbose
      
      - name: Check code coverage (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo install cargo-tarpaulin
          cargo tarpaulin --out Xml --output-dir coverage
      
      - name: Run cargo-deny checks
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo install cargo-deny
          cargo deny check

  # Test with all language features (nightly job)
  test-all-langs:
    name: Test All Languages
    needs: check
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail CI if external grammars break
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - uses: dtolnay/rust-toolchain@stable
          
      - uses: Swatinem/rust-cache@v2
        
      - name: Test with all languages
        run: cargo test --test lang_smoke --features all-langs
      
      - name: Run performance benchmarks with SLO check
        run: |
          OUTPUT_JSON=1 cargo run --release --bin benchmark_performance
          echo "Performance benchmarks passed SLO checks"

  # Build binaries to ensure they compile
  build-bins:
    name: Build Binaries - ${{ matrix.os }}
    needs: check
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - uses: dtolnay/rust-toolchain@stable
          
      - uses: Swatinem/rust-cache@v2
        
      - name: Build all binaries
        run: cargo build --bins --release --verbose
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries-${{ matrix.os }}
          path: target/release/benchmark_*
          if-no-files-found: error

  # Benchmarks (performance regression check)
  benchmark:
    name: Benchmarks
    needs: check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - uses: dtolnay/rust-toolchain@stable
          
      - uses: Swatinem/rust-cache@v2
        
      - name: Run benchmarks
        run: |
          cargo run --bin benchmark_performance --release > benchmark_results.txt
          cat benchmark_results.txt
          
      - name: Check benchmark results
        run: |
          if grep -q "PERFORMANCE GRADE: F" benchmark_results.txt; then
            echo "Performance regression detected!"
            exit 1
          fi
          
      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: |
            benchmark_results.txt
            benchmark_results.json

  # Coverage (optional, informational only)
  coverage:
    name: Code Coverage
    needs: check
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - uses: dtolnay/rust-toolchain@stable
      
      - uses: taiki-e/install-action@cargo-llvm-cov
        
      - uses: Swatinem/rust-cache@v2
        
      - name: Generate coverage
        run: cargo llvm-cov --all-features --lcov --output-path lcov.info
        
      - name: Upload to codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: false

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: rustsec/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install cargo-deny
        run: cargo install cargo-deny
      
      - name: Check licenses and dependencies
        run: cargo deny check

  # Documentation check
  docs:
    name: Documentation
    needs: check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - uses: dtolnay/rust-toolchain@stable
          
      - uses: Swatinem/rust-cache@v2
        
      - name: Check documentation
        run: cargo doc --all-features --no-deps
        env:
          RUSTDOCFLAGS: "-D warnings"

  # All checks must pass
  ci-success:
    name: CI Success
    if: always()
    needs: [check, test, build-bins, benchmark, docs, security]
    runs-on: ubuntu-latest
    
    steps:
      - name: Decide whether all CI jobs succeeded
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
          allowed-skips: coverage, test-all-langs
