name: IPC CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'  # Nightly at 2 AM UTC

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true
      
      - name: Cache cargo
        uses: Swatinem/rust-cache@v2
        with:
          cache-provider: sccache
      
      - name: Format check
        run: cargo fmt --all -- --check
      
      - name: Clippy
        run: cargo clippy --all-features -- -D warnings

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y systemd
      
      - name: Build
        run: cargo build --all-features --release
      
      - name: Test
        run: cargo test --all-features
      
      - name: Verify systemd unit
        run: systemd-analyze verify lapce-ipc.service || true

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Security audit
        run: cargo audit
      
      - name: Install cargo-deny
        run: cargo install cargo-deny
      
      - name: Dependency check
        run: cargo deny check

  miri:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          components: miri
          override: true
      
      - name: Run Miri
        run: |
          cargo +nightly miri setup
          cargo +nightly miri test --features ipc
        env:
          MIRIFLAGS: "-Zmiri-disable-isolation"

  sanitizers:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sanitizer: [address, leak, memory, thread]
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      
      - name: Run with ${{ matrix.sanitizer }} sanitizer
        run: |
          export RUSTFLAGS="-Z sanitizer=${{ matrix.sanitizer }}"
          export RUSTDOCFLAGS="$RUSTFLAGS"
          cargo +nightly test --target x86_64-unknown-linux-gnu --features ipc
        env:
          ASAN_OPTIONS: "detect_leaks=1:halt_on_error=1"
          LSAN_OPTIONS: "suppressions=lsan_suppressions.txt"

  fuzz:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      
      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz
      
      - name: Run fuzzing
        run: |
          cd fuzz
          cargo +nightly fuzz run fuzz_header -- -max_total_time=300
          cargo +nightly fuzz run fuzz_codec -- -max_total_time=300
        continue-on-error: true

  performance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: Build release
        run: cargo build --release --features ipc
      
      - name: Run performance benchmarks
        run: |
          cargo bench --features ipc -- --output-format bencher | tee bench_results.txt
          
          # Check throughput >= 1M msg/s
          throughput=$(grep "ipc_throughput" bench_results.txt | awk '{print $2}')
          if (( $(echo "$throughput < 1000000" | bc -l) )); then
            echo "::warning::Throughput below 1M msg/s: $throughput"
          fi
          
          # Check p99 latency <= 10µs
          latency=$(grep "ipc_p99_latency" bench_results.txt | awk '{print $2}')
          if (( $(echo "$latency > 10" | bc -l) )); then
            echo "::warning::P99 latency above 10µs: $latency"
          fi
      
      - name: Memory footprint check
        run: |
          ./target/release/lapce_ipc_server &
          SERVER_PID=$!
          sleep 2
          
          # Get RSS in KB
          RSS_KB=$(ps -o rss= -p $SERVER_PID)
          RSS_MB=$((RSS_KB / 1024))
          
          kill $SERVER_PID
          
          if [ $RSS_MB -gt 3 ]; then
            echo "::warning::Memory footprint exceeds 3MB: ${RSS_MB}MB"
          fi

  reproducible-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      
      - name: First build
        run: |
          export SOURCE_DATE_EPOCH=1234567890
          cargo build --release --features ipc
          sha256sum target/release/lapce-ai-rust > first.sha256
      
      - name: Clean
        run: cargo clean
      
      - name: Second build
        run: |
          export SOURCE_DATE_EPOCH=1234567890
          cargo build --release --features ipc
          sha256sum target/release/lapce-ai-rust > second.sha256
      
      - name: Compare builds
        run: diff first.sha256 second.sha256
